type Books {
        isbn: Int!
        title: String
        price: Float
        quantity: Int
        publisher_id: Int
        publisher: Publishers!
        checkedOut: [CheckedOut]!
}
type Publishers {
    id: Int!
    name: String
    year_publication: Int
    books: [Books!]!
}
type Readers {
    id: Int!
    name: String
    email: String
    password: String
    address: String
    phone: String
    checkedOut: [CheckedOut]!
}
type CheckedOut {
    id: Int!
    isbn_book: Int
    books: Books!
    reader_id: Int
    readers: Readers!
    checkedout_date: String
    returned: Boolean
    returned_date: String
    duration: Int
}

type AuthPayload {
    token: String
    reader: Readers
}

type Query {
    allBooks: [Books]
    findBookById(isbn: Int!): Books
    allPublishers: [Publishers]
    allCheckedOut: [CheckedOut]
}


type Mutation {
    signup(email: String!, password: String!, name: String!, address:String!, phone: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
    createBook(title: String!, price: Float, publisher_id: Int, quantity: Int): Books
    updateBook(isbn: Int!, publisher_id: Int, title: String, price: Float, quantity: Int): Books
    deleteBook(isbn: Int!): Books
    createPublisher(name: String!, year_publication: Int!): Publishers
    updatePublisher(id: Int!, name: String, year_publication: Int): Publishers
    deletePublisher(id: Int!): Publishers

}