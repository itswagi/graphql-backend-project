type Books {
    isbn: Int!
    title: String
    price: Float
    quantity: Int
    summary: String
    year_publication: Int
    publisher_id: Int
    publisher: Publishers!
}
type Publishers {
    id: Int!
    name: String
    writer: String
    books: [Books!]!
}
type Readers {
    id: Int!
    name: String
    email: String
    password: String
    address: String
    phone: String
    createdAt: Date
    role: String
}
type CheckedOut {
    id: Int!
    book_isbn: Int
    book: Books!
    reader_id: Int
    reader: Readers!
    checkout_date: String
    returned: Boolean
    returned_date: String
    duration: Int
}

type AuthPayload {
    token: String
    reader: Readers
}

type Query {
    allBooks: [Books]
    findBookById(isbn: Int!): Books
    allPublishers: [Publishers]
    findPublisherById(id: Int!): Publishers
    allCheckedOut: [CheckedOut]
    findCheckedOutById(id: Int!): CheckedOut
}


type Mutation {
    signup(email: String!, password: String!, name: String!, address:String!, phone: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload

    createBook(title: String!, price: Float, summary: String!, publisher_id: Int!, quantity: Int, year_publication: Int!): Books
    updateBook(isbn: Int!, publisher_id: Int, title: String, summary: String, price: Float, quantity: Int, year_publication: Int!): Books
    deleteBook(isbn: Int!): Books

    createPublisher(name: String!, writer: String): Publishers
    updatePublisher(id: Int!, name: String, writer: String): Publishers
    deletePublisher(id: Int!): Publishers

    createCheckedOut(book_isbn: Int!, reader_id: Int!, checkout_date: String, returned: Boolean, returned_date: String, duration: Int): CheckedOut
    updateCheckedOut(id: Int!, returned: Boolean, returned_date: String): CheckedOut
    deleteCheckedOut(id: Int!): CheckedOut
}